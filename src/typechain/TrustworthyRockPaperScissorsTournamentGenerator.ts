/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface TrustworthyRockPaperScissorsTournamentGeneratorInterface
  extends utils.Interface {
  functions: {
    "endTournament(uint8)": FunctionFragment;
    "startTournament(address,address,uint8,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "endTournament" | "startTournament"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "endTournament",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "startTournament",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "endTournament",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startTournament",
    data: BytesLike
  ): Result;

  events: {
    "EndTournament(address,uint8)": EventFragment;
    "NewTournament(address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EndTournament"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewTournament"): EventFragment;
}

export interface EndTournamentEventObject {
  tournament: string;
  winner: number;
}
export type EndTournamentEvent = TypedEvent<
  [string, number],
  EndTournamentEventObject
>;

export type EndTournamentEventFilter = TypedEventFilter<EndTournamentEvent>;

export interface NewTournamentEventObject {
  player0: string;
  player1: string;
  tournament: string;
}
export type NewTournamentEvent = TypedEvent<
  [string, string, string],
  NewTournamentEventObject
>;

export type NewTournamentEventFilter = TypedEventFilter<NewTournamentEvent>;

export interface TrustworthyRockPaperScissorsTournamentGenerator
  extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TrustworthyRockPaperScissorsTournamentGeneratorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    endTournament(
      winner: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startTournament(
      _player0: PromiseOrValue<string>,
      _player1: PromiseOrValue<string>,
      _targetWins: PromiseOrValue<BigNumberish>,
      _singleMatchFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  endTournament(
    winner: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startTournament(
    _player0: PromiseOrValue<string>,
    _player1: PromiseOrValue<string>,
    _targetWins: PromiseOrValue<BigNumberish>,
    _singleMatchFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    endTournament(
      winner: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    startTournament(
      _player0: PromiseOrValue<string>,
      _player1: PromiseOrValue<string>,
      _targetWins: PromiseOrValue<BigNumberish>,
      _singleMatchFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "EndTournament(address,uint8)"(
      tournament?: PromiseOrValue<string> | null,
      winner?: null
    ): EndTournamentEventFilter;
    EndTournament(
      tournament?: PromiseOrValue<string> | null,
      winner?: null
    ): EndTournamentEventFilter;

    "NewTournament(address,address,address)"(
      player0?: PromiseOrValue<string> | null,
      player1?: PromiseOrValue<string> | null,
      tournament?: PromiseOrValue<string> | null
    ): NewTournamentEventFilter;
    NewTournament(
      player0?: PromiseOrValue<string> | null,
      player1?: PromiseOrValue<string> | null,
      tournament?: PromiseOrValue<string> | null
    ): NewTournamentEventFilter;
  };

  estimateGas: {
    endTournament(
      winner: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startTournament(
      _player0: PromiseOrValue<string>,
      _player1: PromiseOrValue<string>,
      _targetWins: PromiseOrValue<BigNumberish>,
      _singleMatchFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    endTournament(
      winner: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startTournament(
      _player0: PromiseOrValue<string>,
      _player1: PromiseOrValue<string>,
      _targetWins: PromiseOrValue<BigNumberish>,
      _singleMatchFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

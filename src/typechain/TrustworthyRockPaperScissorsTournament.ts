/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface TrustworthyRockPaperScissorsTournamentInterface
  extends utils.Interface {
  functions: {
    "disputedMatches()": FunctionFragment;
    "getPlayers()": FunctionFragment;
    "getPlayersWins()": FunctionFragment;
    "movePaper()": FunctionFragment;
    "moveRock()": FunctionFragment;
    "moveScissor()": FunctionFragment;
    "numMatch()": FunctionFragment;
    "singleMatchFee()": FunctionFragment;
    "targetWins()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "disputedMatches"
      | "getPlayers"
      | "getPlayersWins"
      | "movePaper"
      | "moveRock"
      | "moveScissor"
      | "numMatch"
      | "singleMatchFee"
      | "targetWins"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "disputedMatches",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayersWins",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "movePaper", values?: undefined): string;
  encodeFunctionData(functionFragment: "moveRock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "moveScissor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "numMatch", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "singleMatchFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetWins",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "disputedMatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPlayers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPlayersWins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "movePaper", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "moveRock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "moveScissor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "numMatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "singleMatchFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "targetWins", data: BytesLike): Result;

  events: {
    "MatchWonBy(uint8,uint8)": EventFragment;
    "TournamentWonBy(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MatchWonBy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TournamentWonBy"): EventFragment;
}

export interface MatchWonByEventObject {
  winner: number;
  numMatch: number;
}
export type MatchWonByEvent = TypedEvent<
  [number, number],
  MatchWonByEventObject
>;

export type MatchWonByEventFilter = TypedEventFilter<MatchWonByEvent>;

export interface TournamentWonByEventObject {
  winner: number;
}
export type TournamentWonByEvent = TypedEvent<
  [number],
  TournamentWonByEventObject
>;

export type TournamentWonByEventFilter = TypedEventFilter<TournamentWonByEvent>;

export interface TrustworthyRockPaperScissorsTournament extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TrustworthyRockPaperScissorsTournamentInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    disputedMatches(overrides?: CallOverrides): Promise<[number]>;

    getPlayers(overrides?: CallOverrides): Promise<[[string, string]]>;

    getPlayersWins(
      overrides?: CallOverrides
    ): Promise<[[BigNumber, BigNumber]]>;

    movePaper(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    moveRock(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    moveScissor(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    numMatch(overrides?: CallOverrides): Promise<[number]>;

    singleMatchFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    targetWins(overrides?: CallOverrides): Promise<[number]>;
  };

  disputedMatches(overrides?: CallOverrides): Promise<number>;

  getPlayers(overrides?: CallOverrides): Promise<[string, string]>;

  getPlayersWins(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  movePaper(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  moveRock(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  moveScissor(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  numMatch(overrides?: CallOverrides): Promise<number>;

  singleMatchFee(overrides?: CallOverrides): Promise<BigNumber>;

  targetWins(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    disputedMatches(overrides?: CallOverrides): Promise<number>;

    getPlayers(overrides?: CallOverrides): Promise<[string, string]>;

    getPlayersWins(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    movePaper(overrides?: CallOverrides): Promise<void>;

    moveRock(overrides?: CallOverrides): Promise<void>;

    moveScissor(overrides?: CallOverrides): Promise<void>;

    numMatch(overrides?: CallOverrides): Promise<number>;

    singleMatchFee(overrides?: CallOverrides): Promise<BigNumber>;

    targetWins(overrides?: CallOverrides): Promise<number>;
  };

  filters: {
    "MatchWonBy(uint8,uint8)"(
      winner?: null,
      numMatch?: null
    ): MatchWonByEventFilter;
    MatchWonBy(winner?: null, numMatch?: null): MatchWonByEventFilter;

    "TournamentWonBy(uint8)"(winner?: null): TournamentWonByEventFilter;
    TournamentWonBy(winner?: null): TournamentWonByEventFilter;
  };

  estimateGas: {
    disputedMatches(overrides?: CallOverrides): Promise<BigNumber>;

    getPlayers(overrides?: CallOverrides): Promise<BigNumber>;

    getPlayersWins(overrides?: CallOverrides): Promise<BigNumber>;

    movePaper(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    moveRock(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    moveScissor(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    numMatch(overrides?: CallOverrides): Promise<BigNumber>;

    singleMatchFee(overrides?: CallOverrides): Promise<BigNumber>;

    targetWins(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    disputedMatches(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPlayers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPlayersWins(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    movePaper(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    moveRock(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    moveScissor(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    numMatch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    singleMatchFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetWins(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
